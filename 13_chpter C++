# 파생(derive) - 기본의 클래스에 새로운 기능을 추가한 새로운 클래스


#include <iostream>

using namespace std;
enum BREED { YORKIE, CAIRN, DANDIE, SHETLAND, DOBERMAN, LAB};
class Mammal{
public:
    Mammal();
    ~Mammal();
    int GetAge() const {return itsAge;}
    void SetAge(int age) {itsAge = age;}
    int GerWeight() const {return itsWeight;}
    void SetWeight(int weight) {itsWeight=weight;}
    void Speak() const { cout << "Mammal sound!" << endl;}
    void Sleep() const { cout << "shhh. i'm sleeping" << endl;}
protected:
    int itsAge;
    int itsWeight;
};
class Dog : public Mammal{
public:
    Dog();
    ~Dog();
    BREED GetBreed() const { return itsBreed;}
    void SetBreed(BREED breeed) { itsBreed = breeed;}
    void WagTail() {cout << "Tail wagging..." << endl;}
    void BegForFood() {cout << "Begging for food..." << endl;}
private:
    BREED itsBreed;
};
Mammal::Mammal():
itsAge(1),
itsWeight(5){
    cout << "Mammal constructor..." << endl;
}
Mammal::~Mammal(){
    cout << "Mannal destructor..." << endl;
}
Dog::Dog():
itsBreed(YORKIE){
    cout<< "Dog constructor..." << endl;
}
Dog::~Dog(){
    cout<< "Dog destructor..." << endl;
}
int main() {
    Dog fido;
    fido.Speak();
    fido.WagTail();
    cout << "Fido is " << fido.GetAge() <<  " years old" << endl;
    return 0;
}
--------------------------------------------------------------------------------------
- 기본(base)클래스, 파생(derived) 클래스
- 상속 : public(0), protected(사용x), private(사용잘x)
- protected : 상속에서 사용

#include <iostream>

using namespace std;
enum BREED { YORKIE, CAIRN, DANDIE, SHETLAND, DOBERMAN, LAB};
class Mammal{
private: int ix; // Mammal 내부에서만 값이 확인된다.
protected: int ipr;
public: int ipu;
    //void getAge(){itsAge;}
};
class Dog : public Mammal { //public 상속 , private에는 접근이 불가하다.
    void getAge(){itsAge;}
};

class Dog{
private: int ix; // 접근 불가영역
protected: int ipr; // protected : int ipr;
public: int ipu; // public : int ipu;

private: int dx;
protected: int dpr;
public : int dpu;
}

class Dog : protected Mammal { //
    void getAge(){itsAge;}
};

class Dog{
private: int ix; // 접근 불가영역
protected: int ipr; // protected : int ipr;
public: int ipu; // protected : int ipu;

private: int dx;
protected: int dpr;
public : int dpu;
}

class Dog : private Mammal { //
    private: int dx;
    protected: int dpr;
    public : int dpu;
};
class Dog{
private: int ix; // 접근 불가영역
protected: int ipr; // private : int ipr;
public: int ipu; // private : int ipu;

private: int dx;
protected: int dpr;
public : int dpu;
}

int main() {
    Mammal m;
    m.itsAge;
}
--------------------------------------------------------------------------------------
# 함수 재생 (Overriding Function)
- 함수를 똑같이 선언해서 막아버리는 방식
#include <iostream>

using namespace std;
enum BREED { YORKIE, CAIRN, DANDIE, SHETLAND, DOBERMAN, LAB};

class Mammal{
public:
    Mammal(){cout<<"Mammal constructor..." << endl;}
    ~Mammal() {cout<< "Mammal destructor..." << endl;}
    void Speak()const { cout<< "Mammal sound!" << endl;}
    void sleep()const { cout<< "shhh. I'm sleeping" << endl;}
protected:
    int itsAge;
    int itsWeight;
};
class Dog : public Mammal{
public:
    Dog() {cout << "Dog constructor..." << endl;}
    ~Dog() {cout << "Dog destructor..." << endl;}
    void WagTail() { cout << "Tail wagging..." << endl;}
    void BegForFood() { cout << "Begging for good..." << endl;}
    void Speak()const{cout << "Woof!" << endl;}
private:
    BREED itsBredd;
};

int main() {
    Mammal bigAnimal;
    Dog fido;
    bigAnimal.Speak();
    fido.Speak();
    return 0;
}
---------------------------------------------------------------------------------------
# overloading(중첩), overriding(중첩)
- 중첩 : 같은 이름을 가지고 메쏘드를 만든다는 것.
- 재생 : 파생 클래스에서 베이스 클래스와 같은 이름, 같은 원형부르르 가진 메소드를 만듦.

#include <iostream>

using namespace std;

class Mammal{
public:
    void Move() const {cout << "Mammal move on step" << endl;}
    void Move(int distance) const{
        cout << "Mammal move";
        cout << distance << "_steps." << endl;
    }
protected:
    int itsAge;
    int itsWeight;
};
class Dog : public Mammal{
public:
    void Move() const { 
        cout << "Dog move 5 steps." << endl;
        //Mammal::Move(3);
};
int main() {
    Mammal bigAnimal;
    Dog fido;
    bigAnimal.Move();
    bigAnimal.Move(2);
    fido.Move();
    //fido.Mammal::Move(6);
    return 0;
}
----------------------------------------------------------------------------------------
#include <iostream>

using namespace std;

class USB { // interface
public:
    virtual void connect() = 0; // 순수 가상함수
    virtual void read() = 0;
};
class USBDisk : public USB{
public:
    virtual void connect(){cout << "USB Disk 연결" << endl;}
    virtual void read(){cout << "USB Disk 읽기" << endl;}
};
class USBMouse : public USB{
public:
    virtual void connect(){cout << "USB Mouse 연결" << endl;}
    virtual void read(){cout << "USB Mouse 읽기" << endl;}
};
class USBWifi : public USB{
public:
    virtual void connect(){cout << "USB Wifi 연결" << endl;}
    virtual void read(){cout << "USB Wifi 읽기" << endl;}
};
class DeskTop {
    USB* usb0;
    public:
    DeskTop() {}
    void connect(USB& rusb0){usb0 = &rusb0; usb0->connect(); usb0 -> read();}
};

int main() {
    DeskTop& myDeskTop = *new DeskTop();
    USBDisk& myUSBDisk = *new USBDisk();
    myDeskTop.connect(myUSBDisk);
    USBMouse& myUSBMouse = *new USBMouse();
    myDeskTop.connect(myUSBMouse);
    USBWifi& myUSBWifi = *new USBWifi();
    myDeskTop.connect(myUSBWifi);
    delete & myUSBDisk;
    delete & myDeskTop;
    return 0;
}
=======================================================================================
# 가상 메쏘드 (Virtual Method)
- 동자 구조를 보여준다.

//-d1reportSingleClassLayoutDog
//-d1reportSingleClassLayoutPuddle
//c1 main.cpp -c -d1reportSingleClassLayoutDog
//프로젝트>속성>c/c++>명령줄>추가옵션>/d1report-

1>main.cpp
1>class USBDisk	size(8):
1>	+---
1> 0	| +--- (base class USB)
1> 0	| | {vfptr}
1>	| +---
1>	+---
1>USBDisk::$vftable@:
1>	| &USBDisk_meta
1>	|  0
1> 0	| &USBDisk::connect
1> 1	| &USBDisk::read
----------------------------------------------------------------------------------------
#include <iostream>

using namespace std;

class Mammal
{
public:
    Mammal():itsAge(1) { cout << "Mammal constructor...\n"; }
    ~Mammal() { cout << "Mammal destructor...\n"; }
    void Move() const { cout << "Mammal move one step\n"; }
    virtual void Speak() const { cout << "Mammal speak!\n"; }
    protected:
    int itsAge;
};
class Dog : public Mammal
{
public:
    Dog() { cout << "Dog Constructor...\n"; }
    ~Dog() { cout << "Dog destructor...\n"; }
    void WagTail() { cout << "Wagging Tail...\n"; }
    void Speak()const { cout<< "Woof!\n"; }
    void Move()const { cout << "Dog moves 5 steps...\n"; }
};
int main() {
    Mammal *pDog = new Dog;
    pDog->Move();
    pDog->Speak();
    return 0;
}
----------------------------------------------------------------------------------------
#include <iostream>

using namespace std;

class Mammal{
public:
    Mammal():itsAge(1){}
    ~Mammal() {}
    virtual void Speak() const { cout << "Mammal speak!\n";}
protected:
    int itsAge;
};
class Dog : public Mammal{
public:
    void Speak() const {cout << "Woof!\n";}
};
class Cat : public Mammal{
public:
    void Speak() const {cout << "Meow!\n";}
};
class Horse : public Mammal{
public:
    void Speak() const {cout << "Winnie!\n";}
};
class Pig : public Mammal{
public:
    void Speak() const {cout << "Oink!\n";}
};
int main() {
    Mammal* theArray[5];
    Mammal* ptr;
    int choice, i;
    for ( i = 0; i<5; i++){
        cout << "(1)dog (2)cat (3)horse (4)pig:";
        cin >> choice;
        switch (choice){
            case 1: ptr = new Dog;
                        break;
            case 2: ptr = new Cat;
                        break;
            case 3: ptr = new Horse;
                        break;
            case 4: ptr = new Pig;
                        break;
        }
        theArray[i] = ptr;
    }
    for (i=0; i<5; i++)
                theArray[i] -> Speak();
    return 0;
}
---------------------------------------------------------------------------------------
#include <iostream>

using namespace std;
enum BOOL {FALSE, TRUE};
class Mammal{
public:
    Mammal():itsAge(1){}
    ~Mammal() {}
    virtual void Speak() const { cout << "Mammal speak!\n";}
protected:
    int itsAge;
};
class Dog : public Mammal{
public:
    void Speak() const {cout << "Woof!\n";}
};
class Cat : public Mammal{
public:
    void Speak() const {cout << "Meow!\n";}
};
void ValueFunction (Mammal);
void PtrFunction (Mammal*);
void RefFunction (Mammal&);
void ValueFunction (Mammal MammalValue){
    MammalValue.Speak();
}
void PtrFunction (Mammal * pMammal){
    pMammal->Speak();
}
void RefFunction (Mammal & rMammal){
    rMammal.Speak();
}
int main() {
    
    Mammal* ptr = 0;
    int choice;
    while (1){
        BOOL fQuit = FALSE;
        cout << "(1)dog (2)cat (0)Quit:";
        cin >> choice;
        switch (choice){
            case 0: fQuit = TRUE;
                        break;
            case 1: ptr = new Dog;
                        break;
            case 2: ptr = new Cat;
                        break;
            default: ptr = new Mammal;
                        break;
            
        }
        if (fQuit)
                        break;
        PtrFunction(ptr);
        RefFunction(*ptr);
        ValueFunction(*ptr);
    }
    return 0;
}
--------------------------------------------------------------------------------------
# 하향 형 변환

#include <iostream>

using namespace std;
enum TYPE { HORSE, PEGASUS };
class Horse{
    public:
    virtual void Gallop(){cout << "Galloping... \n";}
    private:
    int itsAge;
};
class Pegasus : public Horse{
    public:
    virtual void Fly() { cout << "I can fly! I can fly! I can fly! \n";}
};
const int NumberHorses = 5;
int main() {
    Horse* Ranch[NumberHorses];
    Horse* pHorse;
    int choice,i;
    for (i=0; i<NumberHorses; i++){
        cout << "(1)Horse (2) Pegasus: ";
        cin >> choice;
        if (choice == 2)
                pHorse = new Pegasus;
        else
                pHorse = new Horse;
        Ranch[i] = pHorse;
    }
    cout << "\n";
    for (i=0; i<NumberHorses; i++){
        Pegasus * pPeg = dynamic_cast< Pegasus * >(Ranch[i]);
        if (pPeg)
            pPeg->Fly();
        else
            cout << "Just a horse\n";
        delete Ranch[i];
    }
    
    return 0;
}
-------------------------------------------------------------------------------------
# 

#include <iostream>

using namespace std;
class Horse{
public:
    Horse() { cout << "Horse constructor...";}
    virtual ~Horse() { cout << "Horse destructor...";}
    virtual void Whinny() const {cout << "Whinny!..";}
private:
    int itsAge;
};
class Bird{
    public:
    Bird() { cout << "Bird constructor...";}
    virtual ~Bird() { cout << "Bird destructor...";}
    virtual void Chirp() const {cout << "Chirp!..";}
    virtual void Fly() const{
        cout << "I can fly! I can fly! I can fly!";
    }
    private:
    int itsWeight;
};
class Pegasus : public Horse, public Bird{
    public:
    void Chirp() const{Whinny();}
    Pegasus() { cout << "Pegasus constructor...";}
    ~Pegasus() { cout << "Pegasus destructor...";}
    
};
const int MagicNumber = 2;
int main() {
    Horse* Ranch[MagicNumber];
    Bird* Aviary[MagicNumber];
    Horse * pHorse;
    Bird * pBird;
    int choice, i;
    for ( i=0; i<MagicNumber; i++){
        cout << "\n(1)Horse (2) Pegasus: ";
        cin >> choice;
        if ( choice == 2)
            pHorse = new Pegasus;
        else
            pHorse = new Horse;
            Ranch[i]= pHorse;
    }
    cout << endl;
    for ( i=0; i<MagicNumber; i++){
        cout << "\nnRanch[" <<i<<"]:";
        Ranch[i]->Whinny();
        delete Ranch[i];
    }
    for ( i=0; i<MagicNumber; i++){
        cout << "\nnAviary[" <<i<<"]:";
        Aviary[i]->Chirp();
        Aviary[i]->Fly();
        delete Aviary[i];
    }
    
    return 0;
}
--------------------------------------------------------------------------------------
# 모호성 해경
- pPeg->GetColor(); 을 호출하면 컴파일러는 Horse,Bird 클래스 GetColor중 어떤것을 호출하는 애매 모호하게된다.
- pPeg -> Horse::Getcolor(), pPeg -> Bird::Getcolor() 와 같이 사용한다.

class Animal { int a; virtual void f(); }; // a
class Horse : virtual public Animal {int h; }; //a|h
class Bird : virtual public Animal {int b;}; // a|b
class Pegasus : public Horse, public Bird { int h; };
//a|h|a|b|h
// virtual은 포인터이다.

1>main.cpp
1>class Pegasus	size(56):
1>	+---
1> 0	| +--- (base class Horse)
1> 0	| | {vbptr}
1> 8	| | h
1>  	| | <alignment member> (size=4)
1>	| +---
1>16	| +--- (base class Bird)
1>16	| | {vbptr}
1>24	| | b
1>  	| | <alignment member> (size=4)
1>	| +---
1>32	| h
1>  	| <alignment member> (size=4)
1>	+---
1>	+--- (virtual base Animal)
1>40	| {vfptr}
1>48	| a
1>  	| <alignment member> (size=4)
1>	+---
1>Pegasus::$vbtable@Horse@:
1> 0	| 0
1> 1	| 40 (Pegasusd(Horse+0)Animal)
1>Pegasus::$vbtable@Bird@:
1> 0	| 0
1> 1	| 24 (Pegasusd(Bird+0)Animal)
1>Pegasus::$vftable@:
1>	| -40
1> 0	| &Animal::f
1>vbi:	   class  offset o.vbptr  o.vbte fVtorDisp
1>          Animal      40       0       4 0
---------------------------------------------------------------------------------------
# 추상 자료형 - 구체화 되지 않는 자료형
# 순수 가상 함수 - (virtual void Dras() = 0;) 와 같은 형태를 지니고 있다.
객체를 만들지 못하고, 파생만 된다. 파생된곳에서 정의를 해줘야 한다.

#include <iostream>

using namespace std;

enum BOOL { FALSE, TRUE };

class Shape{
public:
    Shape(){}
    ~Shape(){}
    virtual long GetArea() = 0; // error
    virtual long GetPerim()= 0;
    virtual void Draw() = 0;
private:
};
void Shape::Draw() {cout << "Abstract drawing mechanism!\n";}
class Circle : public Shape {
public:
    Circle(int radius):itsRadius(radius){}
    ~Circle(){}
    long GetArea() { return 3 * itsRadius * itsRadius; }
    long GetPerim() { return 9 * itsRadius; }
    void Draw();
private:
int itsRadius; int itsCircumference;
};

void Circle::Draw()
{
    cout << "Circle drawing routine here!\n";
    Shape::Draw();
}
class Rectangle : public Shape
{
public:
    Rectangle(int len, int width):
    itsLength(len), itsWidth(width){}
    ~Rectangle(){}
    long GetArea() { return itsLength * itsWidth; }
    long GetPerim() {return 2*itsLength + 2*itsWidth; }
    virtual int GetLength() { return itsLength; }
    virtual int GetWidth() { return itsWidth; }
    void Draw();
private:
    int itsWidth;
    int itsLength;
};
void Rectangle::Draw()
{
    for (int i = 0; i<itsLength; i++)
    {
        for (int j = 0; j<itsWidth; j++)
                cout << "x ";
        cout << "\n";
    }
    Shape::Draw();
}
class Square : public Rectangle
{
public:
    Square(int len);
    Square(int len, int width);
    ~Square(){}
    long GetPerim() {return 4 * GetLength();}
};
Square::Square(int len):
Rectangle(len,len)
{}
Square::Square(int len, int width):
Rectangle(len,width)
{
    if (GetLength() != GetWidth())
    cout << "Error, not a square... a Rectangle??\n";
}

int main() {
    int choice;
    BOOL fQuit = FALSE;
    Shape * sp;
    while (1)
    {
        cout << "(1)Circle (2)Rectangle (3)Square (0)Quit: ";
        cin >> choice;
        switch (choice)
        {
        case 1: sp = new Circle(5);
                    break;
        case 2: sp = new Rectangle(4,6);
                    break;
        case 3: sp = new Square (5);
                    break;
        default: fQuit = TRUE;
                    break;
        }
        if (fQuit)
                    break;
        sp->Draw();
        cout << "\n";
        }
        return 0;
}
----------------------------------------------------------------------------------------



