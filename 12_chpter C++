#include <iostream>

using namespace std;
void f1 (int* ia){
    cout << ia[0]++ << endl; // 배열받고, 읽고쓰기 / *(ia+0)
}
void f2 (double (*daa)[3]){
    cout << (daa[0][0]+=0.1) << endl;//(*(*daa+0)+1)
}
void f3 (const char **cpa){
    cout << cpa[0] << endl;
}
typedef struct {
    const char CPU[32];
}Computer;
void f4 (Computer * pCom){
    cout << pCom -> CPU << endl;
}
void f5 (Computer & rCom){
    cout << rCom.CPU << endl;
} // 6룡
class AIComputer{
public:
    const char CPU[32];
};
void f6(AIComputer& rAIcom){
    cout << rAIcom.CPU << endl;
}
int main() {
    //1. 1차 배열 -> 함수 -> 1차 포인터
    int ia[5] = {1,2,3,4,5}; //배열 만들기
    f1(ia); //배열 넘기기
    //2. 2차 배열 -> 함수 -> 배열 포인터
    double daa[2][3] = {0.1,0.2,};
    f2(daa);
    //3. 포인터 배열 -> 함수 -> 2차 포인터
    const char* cpa[2] = {"hello", "world"};
    f3 (cpa);
    //4. 구조체 주소 -> 함수 -> 구조체 포인터
    Computer myCom = {"i7-12th"};
    f4(&myCom); // 구조체를 줄때는 &인 주소값으로 할당
    f5(myCom); //C++의 시대, 조선시대의 시작
    //5. 객체 -> 함수 -> 객체 레퍼런스(객체별명)
    AIComputer myAIcom = {"i7-13th AI"};
    f6(myAIcom);
    
}
------------------------------------------------------------------------------------
# 다형성(Polymorphism)은 객체 지향 프로그래밍에서 중요한 개념 중 하나입니다. 이는 같은
타입 또는 클래스에서 서로 다른 동작을 수행할 수 있는 능력을 의미합니다.

#include <iostream>

using namespace std;

class SimpleCat {
    string name;
public:
    SimpleCat(string name){
        cout << "New "<< (this -> name = name) << endl;
    }
    SimpleCat(const SimpleCat& rCat){
        
        cout << "Copy " << (name = rCat.name) << endl;
    }
    ~SimpleCat() {
        cout << "Del " << name << endl;
    }
};
SimpleCat& f1(SimpleCat &psc){
    return psc;
} // SimpleCat tsc = psc 복사 생성자 2번생성
SimpleCat* f2(SimpleCat* psc){
    return psc;
}
int main() {
    SimpleCat sc("Frisky"); //New
    SimpleCat* psc = new SimpleCat("Tom"); //New
    SimpleCat& rsc = *new SimpleCat("Tom's friend"); //New
    SimpleCat sc_2 = sc; // SimpleCat sc_2(sc); / copy
    SimpleCat sc_3(rsc); // copy
    SimpleCat& sc_4 = f1(sc_2); //SimpleCat psc = sc
    SimpleCat* sc_5 = f2(&sc);
    
    delete psc;
    delete &rsc;
}
-----------------------------------------------------------------------------------
#include <iostream>

using namespace std;

class SimpleCat{
public:
    SimpleCat(int age, int weight);
    ~SimpleCat() {}
    int GetAge() {return itsAge;}
    int GetWeight() {return itsWeight;}
private:
    int itsAge;
    int itsWeight;
};
SimpleCat::SimpleCat(int age, int weight):
itsAge(age), itsWeight(weight){}
SimpleCat & TheFunction(){
    static SimpleCat Frisky(5,9);
    return Frisky;
}
int main() {
    SimpleCat & rCat = TheFunction();
    int age = rCat.GetAge();
    cout << "rCat is " << age << " years old!" << endl;
}
------------------------------------------------------------------------------------
#include <iostream>

using namespace std;

class SimpleCat{
public:
    SimpleCat(int age, int weight);
    ~SimpleCat() {}
    int GetAge() {return itsAge;}
    int GetWeight() {return itsWeight;}
private:
    int itsAge;
    int itsWeight;
};

SimpleCat::SimpleCat(int age, int weight):
itsAge(age), itsWeight(weight){}

SimpleCat & TheFunction(){
    SimpleCat * pFrisky = new SimpleCat(5,9);
    cout << "pFrisky: " << pFrisky << endl;
    return *pFrisky;
}

int main() {
    SimpleCat & rCat = TheFunction();
    int age = rCat.GetAge();
    cout << "rCat is " << age << " years old!" << endl;
    SimpleCat * pCat = &rCat;
    delete pCat;
    return 0;
}
-------------------------------------------------------------------------------------
# 복사 생성자
- 기본 생성자와 소멸자에 추가하여 컴파일러는 기본 복사 생성자를 제공한다.
#include <iostream>

using namespace std;

class SimpleCat {
    string name;
public:
    Simplecat():name("no name"){} //***
    SimpleCat(string name):name(name){//***
        cout << "New "<< (this -> name = name) << endl;
    }
    SimpleCat(const SimpleCat& rCat){
        
        cout << "Copy " << (name = rCat.name) << endl;
    }
    ~SimpleCat() {//***
        cout << "Del " << name << endl;
    }
    
};
SimpleCat& f1(SimpleCat &psc){
    return psc;
} // SimpleCat tsc = psc 복사 생성자 2번생성
SimpleCat* f2(SimpleCat* psc){
    return psc;
}
int main() {
    SimpleCat sc("Frisky"); //New
    SimpleCat* psc = new SimpleCat("Tom"); //New
    SimpleCat& rsc = *new SimpleCat("Tom's friend"); //New
    SimpleCat sc_2 = sc; // SimpleCat sc_2(sc); / copy
    SimpleCat sc_3(rsc); // copy
    SimpleCat& sc_4 = f1(sc_2); //SimpleCat psc = sc
    SimpleCat* sc_5 = f2(&sc);
    
    delete psc;
    delete &rsc;
}
------------------------------------------------------------------------------------
# 연산자 오버로딩

#include <iostream>

using namespace std;
class Cat {
    
};
int main() {
    Cat c1;
    Cat c2;
    Cat c3;
    c3 = c1 + c2;
    c3[1];
    c3 << c2;
    c3++;
}
// +,-,,/,%
// >,<,>=,<=,==,!=
// ||, &&, !
// >>, <<, &, |, ^, ~
// []
// ++, +=, -=
// operator overloading!
-------------------------------------------------------------------------------------

#include <iostream>

using namespace std;
class Int {
    int value;
public:
    Int():value(0){}
    Int(int num):value(num){}
    Int(const Int& Num):value(Num.value){}
    int getValue(){return value;}
    Int operator+(const Int& j) const {
        Int tmp(value+j.value);
        return tmp;
    }
    Int ADD(const Int& j) const {
        Int tmp(this -> value+j.value);
        return tmp;
    }
    const Int& operator += (const Int& j){
        this -> value += j.value;
        return *this;
    }
};
int main() {
    Int i;
    cout << i.getValue() << endl;
    Int j=3;//Int j(3)
    cout << j.getValue() <<endl;
    Int k=j; //Int k(j)
    cout << k.getValue() <<endl;
    k = i+j;
    cout << k.getValue() << endl;
    //i.operator+(j); // i+j;와 같은 방식
    //cout << m.getValue() <<endl;
    k=i.ADD(j);
    cout << k.getValue() << endl;
    k = i += j;//i=i+j, i.operator+=(j)
    cout << i.getValue() << endl;
    int a=3;
    int b=4;
    int c=0;
    c = a += b;
    cout << c <<endl;
}
----------------------------------------------------------------------------------
#include <iostream>

using namespace std;

class CAT{
public:
    CAT(){
        itsAge = 1; itsWeight = 5;
    }
    ~CAT() {}int GetAge() const{return itsAge;}
    int GetWeight() const { return itsWeight;}
    void SetAge(int age){itsAge = age;}
private:
    int itsAge;
    int itsWeight;
};
int main() {
    CAT Litter[5];
    int i;
    for (i = 0; i <5; i++){
        for (i=0; i<5; i++)Litter[i].SetAge(2*i +1);
    }
    for (i=0; i<5; i++){
        cout << "Cat#"<<i+1<<":";
        cout << Litter[i].GetAge() << endl;
    }
    return 0;
}
-----------------------------------------------------------------------------------
#include <iostream>

using namespace std;

class CAT{
public:
    CAT(){
        itsAge = 1; itsWeight = 5;
    }
    ~CAT() {}int GetAge() const{return itsAge;}
    int GetWeight() const { return itsWeight;}
    void SetAge(int age){itsAge = age;}
private:
    int itsAge;
    int itsWeight;
};
int main() {
    CAT * Family[500];
    int i;
    CAT * pCat;
    for (i = 0; i <5; i++){
        pCat = new CAT;
        pCat -> SetAge(2*i +1);
        Family[i] = pCat;
    }
    for (i=0; i<5; i++){
        cout << "Cat#"<<i+1<<":";
        cout << Family[i]->GetAge() << endl;
    }
    return 0;
}
------------------------------------------------------------------------------------
#include <iostream>

using namespace std;

class CAT{
public:
    CAT(){
        itsAge = 1; itsWeight = 5;
    }
    ~CAT() {}int GetAge() const{return itsAge;}
    int GetWeight() const { return itsWeight;}
    void SetAge(int age){itsAge = age;}
private:
    int itsAge;
    int itsWeight;
};
int main() {
    CAT * Family = new CAT[500];
    int i;
    CAT * pCat;
    
    for (i = 0; i <500; i++){
        pCat = new CAT;
        pCat -> SetAge(2*i +1);
        Family[i] = *pCat;
        delete pCat;
    }
    for (i=0; i<500; i++){
        cout << "Cat#"<<i+1<<":";
        cout << Family[i].GetAge() << endl;
    }
    delete [] Family;
    return 0;
}
------------------------------------------------------------------------------------
#include <iostream>

using namespace std;
class CAT{};

int main() {
    int* ip = new int(3);
    cout << *ip << endl;
    delete ip;
    int& ir=*new int(5);
    cout << ir << endl;
    delete ir;
    int* ip2 = new int[5]{1,2,3,4,5};
    cout << ip2[3] << endl;
    delete [] ip2;
    Cat& rc = *new Cat;
    delete &rc;
    Cat* pc = new Cat;
    delete pc;
    Cat* pca = new Cat[5];
    delete [] pca;
    return 0;
}
-----------------------------------------------------------------------------------
- LapTop : CPU, Memory, Disk, LTKeyboard, LTMonitor, LTTouch
- DeskTop : CPU, Memory, Disk, EXKeyboard, EXMonitor, EXMouse

#include <iostream>

using namespace std;
class Computer{
    string CPU; // i5-1235U (1.3GHz)
    int Memory; // 16G
    int Disk; // 256GB
public:
    Computer (string CPU, int Memory, int Disk):
    CPU(CPU), Memory(Memory), Disk(Disk){}
    string getCPU()const{return CPU;}
    int getMemory()const{return Memory;}
    int getDisk()const{return Disk;}
};

class LapTop : public Computer {
    string LTKeyboard;// Laptop keyboard
    string LTMonitor; // Laptop Monitor
    string LTTouch; // Laptop thouch
public:
    LapTop(string CPU, int Memory, int Disk,string LTKeyboard,
    string LTMonitor, string LTTouch):
    Computer(CPU,Memory,Disk), LTKeyboard(LTKeyboard), LTMonitor(LTMonitor),
    LTTouch(LTTouch){}
    string getKeyboard() const {return LTKeyboard;}
    string getMonitor() const {return LTMonitor;}
    string getTouch() const {return LTTouch;}
};
// class DeskTop : public Computer {
//     string EXKeyboard; // Desktop Keyboard
//     string EXMonitor; // Desktop Monitor
//     string EXMouse; // Desktop USB Mouse
// };



int main() {
    Computer & myCom = 
    *new Computer ("i5-1235U(1.3GHz)", 16, 256);
    cout << myCom.getCPU() << ", "<<
    myCom.getMemory() << ", "<< myCom.getDisk() << endl;
    cout << "sizeof(myCom):" << sizeof(myCom) << endl;
    delete &myCom;
    
    cout << sizeof(LapTop) << endl;
    LapTop& myLapTop = *new LapTop("i9-13900HX (2.2GHz)", 16, 512, 
                                    "LTKB", "LTMon", "LTTouch");
    cout << myLapTop.getCPU() << ", "<<
    myLapTop.getMemory() << ", "<< myLapTop.getDisk() <<
    ", "<< myLapTop.getKeyboard() << ", "<< myLapTop.getMonitor() <<
    ", "<< myLapTop.getTouch() << endl;
    return 0;
}
---------------------------------------------------------------------------------




