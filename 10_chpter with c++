## 전처리와 분할 컴파일

- '#'이 들어가있는 코드들을 전처리(preprocessor)라고 말한다.
#if 1
#include <stdio.h>
#define PI 3.14159
#define LIMIT 100.0
#define MSG "passed!"
#define ERR_PRN printf("허용 범위를 벗어났습니다!\n")

int main() {
	double radius, area;

	printf("반지름을 입력하세요(10 이하) : ");

	scanf("%lf", &radius);
	area = PI * radius * radius;
	if (area > LIMIT) ERR_PRN;
	else printf("원의 면적 : %.2lf (%s)\n", area, MSG);


	return 0;
}
#endif
------------------------------------------------------------------------------
C -> exe
1. 전처리 #만 처리 -> 순수 C코드 .i
2. 컴파일 C코드 -> 어셈블리어 .s
3. 어셈블 어셈블리어 -> 기계어 .o
4. 링크 .o+.o+.o(묶는다.) -> .exe

#if 1
#include <stdio.h>
#define SUM(a,b) ((a)+(b))
#define MUL(a,b) ((a)*(b))


int main() {
	int a = 10, b = 20;
	int x = 30, y = 40;
	int res;

	printf("a+b = %d\n", SUM(a, b));
	printf("x+y = %d\n", SUM(x, y));
	res = 30 / MUL(2, 5);
	printf("res : %d\n", res);


	return 0;
}
#endif
-------------------------------------------------------------------------------
#if 1
#include <stdio.h>
void func(void) {
	printf("\n");
	printf("파일명 : %s\n", __FILE__);
	printf("함수명 : %s\n", __FUNCTION__);
	printf("행번호 : %d\n", __LINE__);
}


int main() {
	printf("컴파일 날짜와 시간 : %s %s\n\n", __DATE__, __TIME__);
	printf("파일명 : %s\n", __FILE__);
	printf("함수명 : %s\n", __FUNCTION__);
	printf("행번호 : %d\n", __LINE__);

#line 100 "macro.c"
	func();


	return 0;
}
#endif
------------------------------------------------------------------------------
# = 인용부호, ## = 묶어주는 역할(a ## 1) = (a1)
#if 0
#include <stdio.h>
#define PRINT_EXPR(x) printf(#x " = %d\n", x)
#define NAME_CAT(x, y) (x ## y)

int main() {
	int a1, a2;

	NAME_CAT(a, 1) = 10;
	NAME_CAT(a, 2) = 20;
	PRINT_EXPR(a1 + a2);
	PRINT_EXPR(a2 - a1);

	return 0;
}
#endif
--------------------------------------------------------------------------------
#if 1
#include <stdio.h>
#define VER 7
#define BIT16

int main() {
	int max;

#if VER >= 6
	printf("번전 %d입니다.\n", VER);
#endif

#ifdef BIT16
	max = 32767;
#else
	max = 2147483647;
#endif

	printf("int형 변수의 최댓값 : %d\n", max);

	return 0;
}
#endif
---------------------------------------------------------------------------------
# 분할 컴파일

ex_main)
#include <stdio.h>
extern int i;
//int i = 3;
int g();
int main() {
	printf("%d", g());
}

ex_b)
static int i = 3;

static int f() {
	return i;
}

int g() {
	return f();
}
-----------------------------------------------------------------------------------
# 헤더 파일 활용
ex_b.cpp)
//AA
#include "A.h"
//BB
#include "A.h"

int main() {

}

ex_A.h)
#pragma once
//#ifndef __A_H__
//#define __A_H__

struct studend {};
//#endif
------------------------------------------------------------------------------------
====================================================================================
class student{ = 캡슐화(Encapsulation)
private: = static 과 비슷한 느낌 (데이터 은닉)
pulibc:
protected:
}

상속과 재사용 = 중복된 부분을 합하여 상속을 통해 효율을 올린다.

다형성 = 추가되는 프로그램을 자유롭게 끼워넣기 편한 환경

#include <iostream>

using namespace std; //namespace 안에 std를 활용한다.(전처리를 활용하면 동작확인 가능)

int main() {
    int x=10;
    int y=25;
    int z=x+y;

    cout<<"Sum of x+y = " << z; // cout에게 순차적으로 값을 전달
}
-----------------------------------------------------------------------------------
#include <iostream>

using namespace std; //namespace 안에 std를 활용한다.(전처리를 활용하면 동작확인 가능)

int main() {
    
    cout<<"Be Happy " << 2023 << " !" << endl; // endl은 \n과 같은 역할
}
------------------------------------------------------------------------------------
#include <iostream>

using namespace std;

int main() {
    
    cout<< 3 << endl;
    cout<< 3.14 << endl;
    cout<< "3.14" << endl;
    cout<< '3' << endl;
    cout<< 'a' << endl;
}
---------------------------------------------------------------------------------------



































