# CbyC_study
C/C++언어 정리
#if 1
#include <stdio.h>
#include <stdlib.h>
struct train {
	int seats;
	struct train* next;
};
int main(void) {
	train* head = NULL, * tail = NULL;
	for (int i = 0; i < 1000000; i++) {
		if (head == NULL) {
			head = tail = (train*)malloc(sizeof(train));
			
		}
		else {
			tail->next = (train*)malloc(sizeof(train));
			tail = tail->next;
		}
		tail->seats = i;

	}
	printf("1\n");
	train* curr = NULL;
	for (curr = head; curr != tail; curr = curr->next) {
		//printf("%d->", curr->seats);
	}
	printf("%d", curr->seats);
	return 0;
}
#endif
-----------------------------------------------------------------------------------
#if 1
#include <stdio.h>
#include <stdlib.h>
union student{
	int num;
	double grade;
};
int main(void) {
	union student s1 = { 315 }; // 1번 출력후 초기화

	printf("학번 : %d\n", s1.num);
	s1.grade = 4.4;
	printf("학점 : %.lf\n", s1.grade);
	printf("학번 : %d\n", s1.num);
	return 0;
}
#endif
-----------------------------------------------------------------------------------
# enum 문은 switch 문을 같이 사용한다.

#if 1
#include <stdio.h>
#include <stdlib.h>
enum season {SPRING, SUMMER, FALL, WINTER}; //열거형 선언{0,1,2,3}의 값을 가진다.
// spring =5, fall = 10 인경우 summer= 6, winter = 11의 값을 가진다.
int main(void) {
	enum season ss; //열거형 변수 선언
	char* pc = NULL; // 문자열을 저장할 포인터

	ss = SPRING; // 열거 멤버의 값
	switch (ss) { //멤버값 판단
	case SPRING: // spring 대신 0을 대입하여도 동작.
		pc = "inline"; break;
	case SUMMER:
		pc = "swimming"; break;
	case FALL:
		pc = "trip"; break;
	case WINTER:
		pc = "skiing"; break;
	}
	printf("나의 레저 활동 : %s\n", pc);
	return 0;
}
#endif
-----------------------------------------------------------------------------------
* typedef int int32_t;
  typedef int int16_t;
  typedef unsinged int uint32_t;
  typedef unsinged int uint16_t;
  typedef char int8_t;
  
int32_t i;
int8_t c;

* #include <stdint.h>을 가지고있다.

#if 1
#include <stdio.h>
#include <stdlib.h>
struct student {
	int num;
	double grade;
};
typedef struct student Student;
void print_data(Student* ps) {
	printf("학번 : %d\n", ps->num);
	printf("학점 : %.1lf\n", ps->grade);
}
int main(void) {
	Student s1 = { 315, 4.2 };
	print_data(&s1);
	return 0;
}
#endif
-----------------------------------------------------------------------------------
* define NULL (void*)0 = 대상이 무엇인지 모르는 주소값
#if 1
#include <stdio.h>
#include <stdlib.h>

int main(void) {
	FILE * fp = fopen("test.txt", "w");
	char buff[128] = "";
	printf("임의의 문자열을 입력하세요! ");
	gets_s(buff, sizeof(buff));
	
	fprintf(fp, buff);
	fclose(fp);
}
#endif
-------------------------------------------------------------------------------
#if 1
#include <stdio.h>
#include <stdlib.h>

int main(void) {
	FILE* fp = fopen("test.txt", "w");
	for (int i = 0; i < 10; i++) {
		fprintf(fp, "%d", i);
	}
	fclose(fp);
}
#endif
-------------------------------------------------------------------------------
#if 1
#include <stdio.h>
#include <stdlib.h>

int main(void) {
	FILE* fp = fopen("test.txt", "w");
	for (int i = 0; i < 1000000; i++) {
		fprintf(fp, "%d ", i);
	}
	fclose(fp);

	fp = fopen("test.txt", "r");
	int data = 0;
	for (int i = 0; i < 1000000; i++) {
		fscanf(fp, "%d ", &data);
		printf("%d ", data);
	}
	fclose(fp);
}
#endif
-------------------------------------------------------------------------------
# 520페이지 ~~ 
#if 1
#include <stdio.h>
#include <stdlib.h>

int main(void) {
	FILE* fp;
	int ch;

	fp = fopen("a.txt", "r"); // 읽기전용으로 파일 열기
	if (fp == NULL) { // 파일이 개방되었는지 확인
		printf("파일이 열리지 않습니다.\n");
		return 1;
	}
	while (1) {
		ch = fgetc(fp); // 개방한 파일에서 문자 입력
		if (ch == EOF) { // 함수의 반환갑이 EOF면 입력 종료 EOF(end of file) = 오류발생, 파일의 데이터를 모두
						 //읽었는지 확인할 때 사용합니다.
			break;
		}
		putchar(ch); // 입력한 문자를 화면에 출력

	}
	fclose(fp);
	return 0;
}
#endif
--------------------------------------------------------------------------------
#if 1
#include <stdio.h>
#include <stdlib.h>

int main(void) {
	FILE* fp = fopen("test.txt", "r");
	for (int i = 0; i < 1000; i++) {
		fprintf(fp, "%d ", i);
	}
	fclose(fp);

	/*fp = fopen("test.txt", "r");
	int data = 0;
	for (int i = 0; i < 1000000; i++) {
		fscanf(fp, "%d ", &data);
		printf("%d ", data);
	}
	fclose(fp);*/
	fp = fopen("test.txt", "r");
	while (1) {
		int ch = fgetc(fp); // 개방한 파일에서 문자 입력
		if (ch == EOF) { // 함수의 반환갑이 EOF면 입력 종료 EOF(end of file) = 오류발생, 파일의 데이터를 모두
			//읽었는지 확인할 때 사용합니다.
			break;
		}
		putchar(ch); // 입력한 문자를 화면에 출력

	}
	fclose(fp);
}
#endif
-----------------------------------------------------------------------------------
*문자열을 한문잤기 파일로 출력하기
#if 1
#include <stdio.h>
#include <stdlib.h>

int main(void) {
	FILE* fp;
	char str[] = "banana";
	int i;

	fp = fopen("b.txt", "w");
	if (fp == NULL) {
		printf("파일을 만들지 못했습니다.\n");
		return 1;
	}

	i = 0;
	while (str[i] != '\n') {
		fputc(str[i], fp);
		i++;
	}
	fputc('\n', fp);
	fclose(fp);

	return 0;
}
#endif
-------------------------------------------------------------------------------------
#if 1
#include <stdio.h>
#include <stdlib.h>

int main(void) {
	int ch;

	while (1) {
		ch = fgetc(stdin);
		if (ch == EOF) {
			break;
		}
		fputc(ch, stdout);
	}

	return 0;
}
#endif
-------------------------------------------------------------------------------------
#if 0
#include <stdio.h>
#include <stdlib.h>

int main(void) {
	FILE *fp;
	int arr[] = { 13, 10, 13, 13, 10, 26, 13, 10, 13, 10 };
	int i, res;

	fp = fopen("a.txt", "wb");
	for (i = 0; i < 10; i++) {
		fputc(arr[i], fp);
	}
	fclose(fp);

	fp = fopen("a.txt", "rt");
	while (1) {
		res = fgetc(fp);
		if (res == EOF) break;
		printf("%4d", res);
	}
	fclose(fp);

	return 0;
}
#endif
---------------------------------------------------------------------------------------
#if 0
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(void) {
	FILE* fp;
	char str[20];

	fp = fopen("a.txt", "a+");
	if (fp == NULL) {
		printf("파일을 만들지 못했습니다.");
		return 1;
	}

	while (1) {
		printf("과일 이름 : ");
		scanf("%s", str);
		if (strcmp(str, "end") == 0) {
			break;
		}
		else if (strcmp(str, "list") == 0) {
			fseek(fp, 0, SEEK_SET);
			while (1) {
				fgets(str, sizeof(str), fp);
				if (feof(fp)) {
					break;
				}
				printf("%s", str);
			}
		}
		else {
			fprintf(fp, "%s\n", str);
		}
	}
	fclose(fp);


	return 0;
}
#endif
------------------------------------------------------------------------------------
* 파일 복사, 붙여넣기
#if 1
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char **argv) {
	//mycopy.exe temp.png temp_2.png
	char *sname = argv[1];
	char *dname = argv[2];
	FILE* sfile = fopen(sname, "rb");
	FILE* dfile = fopen(dname, "wb");
	char buffer[1];
	while (1) {
		if (fread(buffer, sizeof(buffer), 1, sfile) == 0)break;
		fwrite(buffer, sizeof(buffer), 1, dfile);
	}
	fclose(sfile);
	fclose(dfile);


	return 0;
}
#endif
-----------------------------------------------------------------------------------
* 파일의 데이터 사이즈까지 복사, 붙여넣기
#if 1
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char **argv) {
	//mycopy.exe temp.png temp_2.png
	char *sname = argv[1];
	char *dname = argv[2];
	FILE* sfile = fopen(sname, "rb");
	FILE* dfile = fopen(dname, "wb");
	
	fseek(sfile, 0, SEEK_END);
	long pos = ftell(sfile);
	printf("%d\n", pos);
	char *buffer = (char*)malloc(sizeof(char) * pos);
	rewind(sfile);// fseek(sfile, 0, SEEK_SET);
	/*pos = ftell(sfile);
	printf("%d\n", pos); seek_set 으로 인해'0'인 값을 가진다.*/ 
	fread(buffer, sizeof(char), pos, sfile);
	fwrite(buffer, sizeof(char), pos, dfile);

	fclose(sfile);
	fclose(dfile);


	return 0;
}
#endif
---------------------------------------------------------------------------------



















