# 정적 멤버 자료 (static Member Data)
- 정적 멤버 변수들은 클래스의 모든 인스턴스에서 공유된다.
- 정적 변수는 객체에 속하지 않고 클래스에 속하며, 클래스 밖에서 초기화를 해야한다.
- 정적 변수는 객체가 없어도 접근이 가능하다. (ex : Cat::HowManyCats)

#include <iostream>

using namespace std;

class Cat {
public:
    Cat(int age):itsAge(age){HowManyCats++;}
    virtual ~Cat() {HowManyCats--;}
    virtual int GetAge() {return itsAge;}
    virtual void SetAge(int age){itsAge = age;}
    static int HowManyCats;
private:
    int itsAge;
};
int Cat::HowManyCats = 0;

int main() {
    const int MaxCats = 5; int i;
    Cat *CatHouse[MaxCats];
    for (i = 0; i<MaxCats; i++)
        CatHouse[i] = new Cat(i);
    for (i = 0; i<MaxCats; i++){
        cout << "There are ";
        cout << Cat::HowManyCats;
        cout << " cats left!\n";
        cout << "Deleting the one which is ";
        cout << CatHouse[i]->GetAge();
        cout << " years old\n";
        delete CatHouse[i];
    }
    return 0;
}
---------------------------------------------------------------------------------------
# 정적 멤버 함수 (static Member Function)
- 정적 멤버 함수는 객체 내에서만 존재하는 것이 아니라 클래스의 범위 내에서 존재합니다.

#include <iostream>

using namespace std;

class Cat {
public:
    Cat(int age):itsAge(age){HowManyCats++;}
    virtual ~Cat() {HowManyCats--;}
    virtual int GetAge() {return itsAge;}
    virtual void SetAge(int age){itsAge = age;}
    static int GetHowMany() {return HowManyCats;}
private:
    int itsAge;
    static int HowManyCats;
};
int Cat::HowManyCats = 0;
void TelepathicFunction();
int main() {
    const int MaxCats = 5; int i;
    Cat *CatHouse[MaxCats];
    for (i = 0; i<MaxCats; i++)
        CatHouse[i] = new Cat(i);
        TelepathicFunction();
    for (i = 0; i<MaxCats; i++){
        delete CatHouse[i];
        TelepathicFunction();
    }
    return 0;
}

void TelepathicFunction(){
    cout << "There are " << Cat::GetHowMany() << "cats alive!" << endl;
}
------------------------------------------------------------------------------------
# 프랜드 클래스(Friend Class)
- 디버깅 용도로 활용

#include <iostream>
using namespace std;
class A{
	int age;
public:
	A(int age) :age(age) {}
	int getAge() { return age; }
};
void peekAge(A& ra) { cout << ra.getAge() << endl; }
int main() {
	A& ra = *new A(19);
	cout << ra.getAge() << endl;
	peekAge(ra);
}
======================================================================================
#include <iostream>
using namespace std;
//1
class Weapon {
public:
    virtual void attack() = 0;
}; 
class Character {
    int x;
    Weapon* weapon;
public:
    Character(int x) : x(x),weapon(NULL) {}
    void move() { x++; }
    int getX() const { return x; }
    void attack() { weapon->attack(); }
    void setWeapon(Weapon& weapon) { this->weapon = &weapon; }
};
void move(Character& c) { c.move(); }
//2
class Sword : public Weapon {
public:
    virtual void attack() { cout << "Attack with Sword" << endl; }
};

class Stick : public Weapon {
public:
    virtual void attack() { cout << "Attack with stick" << endl; }
};
typedef struct {
    int data[100000];//40KB
} Bigdata;
void SendWiFi(const Bigdata* pBD) { cout << pBD->data[0] << endl; }

void f1(int* ia) { cout << ia[1] << endl; }
void f2(int(*iaa)[3]) { cout << iaa[1][2] << endl; }
void f3(int** ipa) { cout << ipa[2][2] << endl; }


int main() {
// 1. 객체-> 함수-> 참조자
 	   Character& c = *new Character (0);
       cout << c.getX() << endl;
 	   move(c);
       cout << c.getX() << endl;
// 	  다형성 : 같은 종류를 동작이 다르게 구현하는 방법
// 2. 순수 가상 클래스->상속->파생 클래스
       Weapon& weapon = *new Stick();
       c.setWeapon(weapon);
       c.attack();
// 3. 구조체주소->함수->구조체포인터
       Bigdata* pBD = (Bigdata*) malloc(sizeof(Bigdata) * 1);
       pBD->data[0] = 42; //pBD.data[0] = 42;
       SendWiFi(pBD);
// 4. 일차배열 -> 함수 -> 일차포인터
       int ia[5] = { 1,2,3,4,5 };
       f1(ia); //void f1(int ia[5]); // int ia[] => int *ia
// 5. 이차배열 -> 함수 -> 배열포인터
       int iaa[2][3] = { {1,2,3},{4,5,6} };
       f2(iaa); //void f2(int iaa[2][3]) // int iaa[3] => int (*iaa)[3]
// 6. 포인터배열 -> 함수 -> 이차포인터
       int ia2[3] = { 11,22,33 };
       int ia3[4] = { 111,222,333,444 };
       int* ipa[3] = {ia,ia2,ia3};
       f3(ipa); //void f3(int* ipa[3]) // int* ipa[] => int **ipa
}
--------------------------------------------------------------------------------------





























