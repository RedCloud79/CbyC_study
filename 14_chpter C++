# 정적 멤버 자료 (static Member Data)
- 정적 멤버 변수들은 클래스의 모든 인스턴스에서 공유된다.
- 정적 변수는 객체에 속하지 않고 클래스에 속하며, 클래스 밖에서 초기화를 해야한다.
- 정적 변수는 객체가 없어도 접근이 가능하다. (ex : Cat::HowManyCats)

#include <iostream>

using namespace std;

class Cat {
public:
    Cat(int age):itsAge(age){HowManyCats++;}
    virtual ~Cat() {HowManyCats--;}
    virtual int GetAge() {return itsAge;}
    virtual void SetAge(int age){itsAge = age;}
    static int HowManyCats;
private:
    int itsAge;
};
int Cat::HowManyCats = 0;

int main() {
    const int MaxCats = 5; int i;
    Cat *CatHouse[MaxCats];
    for (i = 0; i<MaxCats; i++)
        CatHouse[i] = new Cat(i);
    for (i = 0; i<MaxCats; i++){
        cout << "There are ";
        cout << Cat::HowManyCats;
        cout << " cats left!\n";
        cout << "Deleting the one which is ";
        cout << CatHouse[i]->GetAge();
        cout << " years old\n";
        delete CatHouse[i];
    }
    return 0;
}
---------------------------------------------------------------------------------------
# 정적 멤버 함수 (static Member Function)
- 정적 멤버 함수는 객체 내에서만 존재하는 것이 아니라 클래스의 범위 내에서 존재합니다.

#include <iostream>

using namespace std;

class Cat {
public:
    Cat(int age):itsAge(age){HowManyCats++;}
    virtual ~Cat() {HowManyCats--;}
    virtual int GetAge() {return itsAge;}
    virtual void SetAge(int age){itsAge = age;}
    static int GetHowMany() {return HowManyCats;}
private:
    int itsAge;
    static int HowManyCats;
};
int Cat::HowManyCats = 0;
void TelepathicFunction();
int main() {
    const int MaxCats = 5; int i;
    Cat *CatHouse[MaxCats];
    for (i = 0; i<MaxCats; i++)
        CatHouse[i] = new Cat(i);
        TelepathicFunction();
    for (i = 0; i<MaxCats; i++){
        delete CatHouse[i];
        TelepathicFunction();
    }
    return 0;
}

void TelepathicFunction(){
    cout << "There are " << Cat::GetHowMany() << "cats alive!" << endl;
}
------------------------------------------------------------------------------------
# 프랜드 클래스(Friend Class)
- 디버깅 용도로 활용

#include <iostream>
using namespace std;
class A{
	int age;
public:
	A(int age) :age(age) {}
	int getAge() { return age; }
};
void peekAge(A& ra) { cout << ra.getAge() << endl; }
int main() {
	A& ra = *new A(19);
	cout << ra.getAge() << endl;
	peekAge(ra);
}
======================================================================================






























