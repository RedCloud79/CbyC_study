# 클래스의 선언
malloc -> new : 생성자(== __intit__)
free -> delete : 소멸자
c++ = 큰int라고 생각
# private = class, public = struct


#include <iostream>

using namespace std;

class Cat{
    public:
    int itsAge;
    int itsWeight;
};

int main() {
    Cat Fristhy;
    Fristhy.itsAge = 5;
    cout<<"Fristhy is a cat who is";
    cout<<Fristhy.itsAge<<"years old.\n";
}
-----------------------------------------------------------------------------------
# 스코프 연산자 (::) = 들어갈 함수::받을변수

#include <iostream>

using namespace std;

class Cat{
    public:
    int GetAge();
    void SetAge(int age);
    void Meow();
    private:
    int itsAge;
};
int Cat::GetAge(){
    return itsAge;
}
void Cat::SetAge(int age){
    itsAge = age;
}
void Cat::Meow(){
    cout << "Meow.\n";
}
int main() {
    Cat Frisky;
    Frisky.SetAge(5);
    Frisky.Meow();
    cout<<"Frisky is a cat who is ";
    cout<<Frisky.GetAge()<<"years old.\n";
    Frisky.Meow();
    return 0;
    
}
----------------------------------------------------------------------------------
# 생성자와 소멸자
- 생성자 : 클래스와 같은 이름을 사용
- 소멸자 : ("~"를 사용)

#include <iostream>

using namespace std;

class Cat{
public:
    Cat(int initialAge);
    ~Cat();
    int GetAge();
    void SetAge(int age);
    void Meow();
private:
    int itsAge;
};
Cat::Cat(int initialAge){
    itsAge = initialAge;
    cout << "생성자 \n";
}
Cat::~Cat(){
    cout<<"소멸자 \n";
}
int Cat::GetAge(){
    return itsAge;
}
void Cat::SetAge(int age){
    itsAge = age;
}
void Cat::Meow(){
    cout << "Meow.\n";
}
int main() {
    Cat Frisky(5);
    Frisky.Meow();
    cout<<"Frisky is a cat who is ";
    cout<<Frisky.GetAge()<<"years old.\n";
    Frisky.Meow();
    Frisky.SetAge(7);
    cout << "Now Frisky is";
    cout<<Frisky.GetAge()<<"years old.\n";
    Frisky.Meow();
    return 0;
    
}
-----------------------------------------------------------------------------------
#include <iostream>

using namespace std;

class Cat{
    int itsAge;
    const char* name;
public:
    Cat(int initialAge, const char* name) {cout << "Cat 데이터 생성 "<<name << endl;
    itsAge = initialAge; this -> name = name;}
    ~Cat(){ cout<<"Cat 데이터 해제 "<<this->name<<endl;}
    int GetAge(){return itsAge;}
    void SetAge(int age){itsAge = age;}
    void Meow(){cout << "Meow.\n";}
};
Cat Tom(3,"Tom"); //함수바깥, 전역공간, 데이터공간
int main() {
    Cat Frisky(5,"Frisky");// 함수 안쪽, 지역공간, 스택공간
    Cat * theCat = new Cat(7,"Tom Friend"); // 힙공간
    delete theCat; // 막으면 TomFriend가 마지막에 처리된다.
    
}
-------------------------------------------------------------------------------------
//자바 Cat (위에와 동일한 동작을 하는코드)
class Cat {
    private int itsAge;
    private String name;
    public Cat(int initialAge,String name) {
        System.out.println("Cat 데이터 생성"+name);
        itsAge=initialAge;
        this.name = name;
    }
    public int GetAge() {return itsAge;}
    public void SetAge(int age){itsAge=age;}
    public void Meow(){System.out.println("Meow");}
}
public class MyClass {
    public static void main(String args[]) {
      Cat theCat = new Cat(7,"Tom's Friend");
    }
}
------------------------------------------------------------------------------------
# const 멤버 함수 = get쪽에 붙는다.
- 상수함술(상수안쪽에서 변수를 안바꾸는 것) 선언된다.
#include <iostream>

using namespace std;

struct Student{ // class Student
                // public:  위와 같은 class이 형태로 변경 가능
    int age;
    int getAge() const {return this->age;}
    void setAge(int newAge){
    this->age = newAge;}
};
int main(void) {
   Student s3 = { 24 };
   cout << s3.getAge() << endl;
   s3.setAge(s3.getAge() + 1);
   cout << s3.getAge() << endl;
}
-----------------------------------------------------------------------------------
# 포인터
- 자유 저장 영역(malloc)에 있는 데이터 관리
- new 키워드를 사용하여 자유 저장영역에 메모리를 할당가능.
- new는 객체 생성용 함수
- delete 객체를 없앨 때 사용한다.

#include <iostream>

using namespace std;

int main(void) {
   int localVariable = 5;
   int *pLocal = &localVariable;
   int*pHeap = new int;
   if(pHeap == NULL){
       cout<<"Error! No memory for pHeap!!!";
       return 0;
   }
   *pHeap = 7;
   cout << "localVariable: " << localVariable << endl;
   cout << "*pLocal" << *pLocal << endl;
   cout << "*pHeap" << *pHeap << endl;
   delete pHeap;
   pHeap = new int;
   if(pHeap == NULL){
       cout << "Error! No memory for pHeap!!!";
       return 0;
   }
   *pHeap = 9;
   cout << "*pHeap: " << *pHeap << endl;
   delete pHeap;
   return 0;
}
--------------------------------------------------------------------------------
#include <iostream>

using namespace std;
class SimpleCat {
public:
    SimpleCat() {itsAge = new int(2); itsWeight = new int(5);}
    ~SimpleCat() {delete itsAge; delete itsWeight;}
    int GetAge() const {return *itsAge;}
    void SetAge(int age) {*itsAge = age;}
    int GetWeight() const {return *itsWeight;}
    void SetWeight(int Weight) {*itsWeight = Weight;}
private:
    int * itsAge;
    int * itsWeight;
};
int main(void) {
   SimpleCat *Frisky = new SimpleCat;
   cout <<"Frisky is"<<Frisky->GetAge() <<"year old \n";
   Frisky->SetAge(5);
   cout <<"Frisky is"<<Frisky->GetAge() <<"year old \n";
   delete Frisky;
   return 0;
}
---------------------------------------------------------------------------------





































