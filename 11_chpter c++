# 클래스의 선언
malloc -> new : 생성자(== __intit__)
free -> delete : 소멸자
c++ = 큰int라고 생각
# private = class, public = struct


#include <iostream>

using namespace std;

class Cat{
    public:
    int itsAge;
    int itsWeight;
};

int main() {
    Cat Fristhy;
    Fristhy.itsAge = 5;
    cout<<"Fristhy is a cat who is";
    cout<<Fristhy.itsAge<<"years old.\n";
}
-----------------------------------------------------------------------------------
# 스코프 연산자 (::) = 들어갈 함수::받을변수

#include <iostream>

using namespace std;

class Cat{
    public:
    int GetAge();
    void SetAge(int age);
    void Meow();
    private:
    int itsAge;
};
int Cat::GetAge(){
    return itsAge;
}
void Cat::SetAge(int age){
    itsAge = age;
}
void Cat::Meow(){
    cout << "Meow.\n";
}
int main() {
    Cat Frisky;
    Frisky.SetAge(5);
    Frisky.Meow();
    cout<<"Frisky is a cat who is ";
    cout<<Frisky.GetAge()<<"years old.\n";
    Frisky.Meow();
    return 0;
    
}
----------------------------------------------------------------------------------
# 생성자와 소멸자
- 생성자 : 클래스와 같은 이름을 사용
- 소멸자 : ("~"를 사용)

#include <iostream>

using namespace std;

class Cat{
public:
    Cat(int initialAge);
    ~Cat();
    int GetAge();
    void SetAge(int age);
    void Meow();
private:
    int itsAge;
};
Cat::Cat(int initialAge){
    itsAge = initialAge;
    cout << "생성자 \n";
}
Cat::~Cat(){
    cout<<"소멸자 \n";
}
int Cat::GetAge(){
    return itsAge;
}
void Cat::SetAge(int age){
    itsAge = age;
}
void Cat::Meow(){
    cout << "Meow.\n";
}
int main() {
    Cat Frisky(5);
    Frisky.Meow();
    cout<<"Frisky is a cat who is ";
    cout<<Frisky.GetAge()<<"years old.\n";
    Frisky.Meow();
    Frisky.SetAge(7);
    cout << "Now Frisky is";
    cout<<Frisky.GetAge()<<"years old.\n";
    Frisky.Meow();
    return 0;
    
}
-----------------------------------------------------------------------------------
#include <iostream>

using namespace std;

class Cat{
    int itsAge;
    const char* name;
public:
    Cat(int initialAge, const char* name) {cout << "Cat 데이터 생성 "<<name << endl;
    itsAge = initialAge; this -> name = name;}
    ~Cat(){ cout<<"Cat 데이터 해제 "<<this->name<<endl;}
    int GetAge(){return itsAge;}
    void SetAge(int age){itsAge = age;}
    void Meow(){cout << "Meow.\n";}
};
Cat Tom(3,"Tom"); //함수바깥, 전역공간, 데이터공간
int main() {
    Cat Frisky(5,"Frisky");// 함수 안쪽, 지역공간, 스택공간
    Cat * theCat = new Cat(7,"Tom Friend"); // 힙공간
    delete theCat; // 막으면 TomFriend가 마지막에 처리된다.
    
}
-------------------------------------------------------------------------------------
//자바 Cat (위에와 동일한 동작을 하는코드)
class Cat {
    private int itsAge;
    private String name;
    public Cat(int initialAge,String name) {
        System.out.println("Cat 데이터 생성"+name);
        itsAge=initialAge;
        this.name = name;
    }
    public int GetAge() {return itsAge;}
    public void SetAge(int age){itsAge=age;}
    public void Meow(){System.out.println("Meow");}
}
public class MyClass {
    public static void main(String args[]) {
      Cat theCat = new Cat(7,"Tom's Friend");
    }
}
------------------------------------------------------------------------------------
# const 멤버 함수 = get쪽에 붙는다.
- 상수함술(상수안쪽에서 변수를 안바꾸는 것) 선언된다.
#include <iostream>

using namespace std;

struct Student{ // class Student
                // public:  위와 같은 class이 형태로 변경 가능
    int age;
    int getAge() const {return this->age;}
    void setAge(int newAge){
    this->age = newAge;}
};
int main(void) {
   Student s3 = { 24 };
   cout << s3.getAge() << endl;
   s3.setAge(s3.getAge() + 1);
   cout << s3.getAge() << endl;
}
-----------------------------------------------------------------------------------
# 포인터
- 자유 저장 영역(malloc)에 있는 데이터 관리
- new 키워드를 사용하여 자유 저장영역에 메모리를 할당가능.
- new는 객체 생성용 함수
- delete 객체를 없앨 때 사용한다.

#include <iostream>

using namespace std;

int main(void) {
   int localVariable = 5;
   int *pLocal = &localVariable;
   int*pHeap = new int;
   if(pHeap == NULL){
       cout<<"Error! No memory for pHeap!!!";
       return 0;
   }
   *pHeap = 7;
   cout << "localVariable: " << localVariable << endl;
   cout << "*pLocal" << *pLocal << endl;
   cout << "*pHeap" << *pHeap << endl;
   delete pHeap;
   pHeap = new int;
   if(pHeap == NULL){
       cout << "Error! No memory for pHeap!!!";
       return 0;
   }
   *pHeap = 9;
   cout << "*pHeap: " << *pHeap << endl;
   delete pHeap;
   return 0;
}
--------------------------------------------------------------------------------
#include <iostream>

using namespace std;
class SimpleCat {
public:
    SimpleCat() {itsAge = new int(2); itsWeight = new int(5);}
    ~SimpleCat() {delete itsAge; delete itsWeight;}
    int GetAge() const {return *itsAge;}
    void SetAge(int age) {*itsAge = age;}
    int GetWeight() const {return *itsWeight;}
    void SetWeight(int Weight) {*itsWeight = Weight;}
private:
    int * itsAge;
    int * itsWeight;
};
int main(void) {
   SimpleCat *Frisky = new SimpleCat;
   cout <<"Frisky is"<<Frisky->GetAge() <<"year old \n";
   Frisky->SetAge(5);
   cout <<"Frisky is"<<Frisky->GetAge() <<"year old \n";
   delete Frisky;
   return 0;
}
---------------------------------------------------------------------------------
# const 포인터
- 형 앞이나 형뒤, 또는 양쪽에 모두 사용할 수 있다.
- const int * pOne; => 상수 정수에 대한 포인터 (읽기만 할때 사용) 

#include <iostream>

using namespace std;
void print(const int* pOne){
    cout << pOne[0] << " " << pOne[1]<< endl;
    //pOne[0]++;
}
void copy(int* pTwo, const int* pOne){ // pTwo 출력배열, pOne 입력배열
    pTwo[0]=pOne[0];
    pTwo[1]=pOne[1];
    //pOne[1]++;
}
int main(void){
    int* pOne = new int[5]; //&pOne[0]
    pOne[0] = 1, pOne[1] = 2;
    cout << pOne[0] << " " << pOne[1]<< endl;
    print(pOne);
    cout << pOne[0] << " " << pOne[1]<< endl;
    int* pTwo = new int[5];
    copy(pTwo,pOne); // pTwo<= pOne
    print(pTwo); print(pOne);
}
-----------------------------------------------------------------------------------
- int * const pTwo; => int값이 변경이 가능하지만, pTwo의 값의 변경은 안된다.(주소변수 말고 상수)
@ pTwo++;, pTwo += 1; 을 사용하지 못한다. *(pTwo+1)<=> pTwo[1] 형태는 사용가능

#include <iostream>

using namespace std;
class Rectange {
    int Length;
public:
    Rectange(int len){Length = len;}
    int getlength()const {return Length;}
};

int main(void){
    //Rectange * const pRect = new Rectange(3);
    Rectange& pRect = *new Rectange(3);
    //cout << pRect->getlength()<<endl;
    cout << pRect.getlength()<<endl;
    //pRect ++;
    //cout << (pRect+1)->getlength()<<endl;
    //cout << pRect[1].getlength()<<endl;
}
--------------------------------------------------------------------------------
# 참조자
- 참조를 만드는 방법 : 대상 개체의 형을 적고 참조 연산자(&)와 참조의 이름으 적으면 된다.
ex : int&rSomeRef = somelnt

#include <iostream>

using namespace std;

int main() {
    // 포인터
    int i =3;
    int*p = &i
    cout << &i << " " <<p,,endle;
    //int* p = new int(3); cout << p << endl;
    p++; cout << p << endl; //증감
    p+1; cout << p+1 << endl; //오프셋
    p; cout << p << endl; // 값, p=p+1
    &p; cout << &p << endl; // 주소값
    *p; cout << *(p-1) << endl; // 접근연산, p[0]
    
    int i = 4;
    int & r = i; //r = 주소값
    cout << i <<endl;
    cout << r <<endl;
    r++; cout << i << " " <<r<< endl;
    r+1; cout << i << " " << r << endl;
    r; cout << i << " " << r << endl;
    &r; cout << &i << " " << &r << endl;
    
}
-------------------------------------------------------------------------------------
#include <iostream>

using namespace std;

int main() {
    // 포인터
    int i =3;
    int* p = &i;
    cout << &i << " : " << i  << endl;
    cout << &p << " : " << p << endl;
    cout << &i+1 << " : " <<(int *)*(&i+1)<<endl;
    
    int i=3;
    int* p = &i;
    printf("%#012x:%#d\n", &i, i);
    printf("%#012x:%#012x\n", &p, p);
    printf("%#012x:%#012x\n", &i+1, *(&i+1));

    
    //참조자
    int i =3;
    int& r = i;
    cout << &i << " : " << i  << endl;
    cout << &r << " : " << r << endl; // == cout << &i << " : " << i  << endl; 와 같은 값을 가진다.
    cout << &i+1 << " : " <<(int *)*(&i+1)<<endl; // p의 값을 알기위한 값
    
    int i = 3;
    int &r = i;
    printf("%#012x:%#d\n", &i, i);
    printf("%#012x:%#012x\n", &r, r);
    printf("%#012x:%#012x\n", &i+1, *(&i+1));
    
    int* p = new int(3); cout << p << endl;
    p++; cout << p << endl; //증감
    p+1; cout << p+1 << endl; //오프셋
    p; cout << p << endl; // 값, p=p+1
    &p; cout << &p << endl; // 주소값
    *p; cout << *(p-1) << endl; // 접근연산, p[0]
    
    int i = 4;
    int & r = i; //r = 주소값
    cout << i <<endl;
    cout << r <<endl;
    r++; cout << i << " " <<r<< endl;
    r+1; cout << i << " " << r << endl;
    r; cout << i << " " << r << endl;
    &r; cout << &i << " " << &r << endl;
    
}
------------------------------------------------------------------------------------





























